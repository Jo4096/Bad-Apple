#include <iostream>
#include <fstream>
#include <vector>
#include <chrono>
#include <thread>
#include <cmath>

#include "bad_apple_data.h" //generated by python

void decompress_rle_frame(const uint8_t *frame_data, std::vector<char> &decompressed_grid, size_t data_len, int width, int height)
{
    decompressed_grid.clear();
    decompressed_grid.resize(width * height);

    size_t data_ptr = 0;
    int grid_ptr = 0;

    while (data_ptr < data_len)
    {
        uint8_t run_len = frame_data[data_ptr++];
        uint8_t rle_byte = frame_data[data_ptr++];

        for (int run = 0; run < run_len; ++run)
        {
            for (int bit = 7; bit >= 0; --bit)
            {
                char pixel = (rle_byte & (1 << bit)) ? '#' : '.';
                if (grid_ptr < width * height)
                {
                    decompressed_grid[grid_ptr++] = pixel;
                }
            }
        }
    }
}

void print_frame(const std::vector<char> &grid, int width, int height)
{
    for (int y = 0; y < height; ++y)
    {
        for (int x = 0; x < width; ++x)
        {
            std::cout << grid[y * width + x] << ' ';
        }
        std::cout << std::endl;
    }
}

int main()
{
    std::cout << "Bad Apple!! Teste de Descompressão RLE" << std::endl;
    std::cout << "-----------------------------------------------" << std::endl;
    std::cout << "Resolução: " << BAD_APPLE_WIDTH << "x" << BAD_APPLE_HEIGHT << std::endl;
    std::cout << "FPS: " << BAD_APPLE_FPS << std::endl;
    std::cout << "Total Frames: " << BAD_APPLE_FRAME_COUNT << std::endl;
    std::cout << "Tamanho de Dados (total): " << (sizeof(bad_apple_data) / 1024.0) << " KB" << std::endl;
    std::cout << "-----------------------------------------------" << std::endl;

    std::this_thread::sleep_for(std::chrono::milliseconds(3000));

    std::chrono::milliseconds frame_delay_ms(0);
    if (BAD_APPLE_FPS > 0)
    {
        frame_delay_ms = std::chrono::milliseconds(static_cast<long long>(1000.0 / BAD_APPLE_FPS));
    }

    std::vector<char> grid;

    for (int i = 0; i < BAD_APPLE_FRAME_COUNT; ++i)
    {
        auto start_time = std::chrono::steady_clock::now();

        size_t offset = bad_apple_offsets[i];

        const uint8_t *size_ptr = &bad_apple_data[offset];
        uint16_t rle_data_len = size_ptr[0] | (size_ptr[1] << 8); // Little-endian

        const uint8_t *rle_data = &bad_apple_data[offset + 2];

        decompress_rle_frame(rle_data, grid, rle_data_len, BAD_APPLE_WIDTH, BAD_APPLE_HEIGHT);

        print_frame(grid, BAD_APPLE_WIDTH, BAD_APPLE_HEIGHT);

        if (BAD_APPLE_FPS > 0)
        {
            auto end_time = std::chrono::steady_clock::now();
            auto elapsed_time = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time);

            if (elapsed_time < frame_delay_ms)
            {
                std::chrono::milliseconds sleep_time = frame_delay_ms - elapsed_time;
                std::this_thread::sleep_for(sleep_time);
            }
        }
    }

    return 0;
}
